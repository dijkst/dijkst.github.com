<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 解决问题 | 第九块石头]]></title>
  <link href="http://dijkst.github.io/blog/categories/jie-jue-wen-ti/atom.xml" rel="self"/>
  <link href="http://dijkst.github.io/"/>
  <updated>2015-03-22T17:11:13+08:00</updated>
  <id>http://dijkst.github.io/</id>
  <author>
    <name><![CDATA[dijkst]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[分段读取任何编码文本]]></title>
    <link href="http://dijkst.github.io/blog/2013/05/30/fen-duan-du-qu-ren-he-ge-shi-wen-ben/"/>
    <updated>2013-05-30T23:20:00+08:00</updated>
    <id>http://dijkst.github.io/blog/2013/05/30/fen-duan-du-qu-ren-he-ge-shi-wen-ben</id>
    <content type="html"><![CDATA[<p>世界上的字符编码多得眼花缭乱，而且绝大部分都是不定长的编码。要跳到一个巨大文本文件的第n个字符就必须从0开始一个一个地分析字符，数到n为止；又或者整个文件导入，让系统把文件里的数据转成string，再在string里获得第n个字符。</p>

<p>不过，本文也没法解决上面那个问题，上面只是想说明据我所知，把文本文件转成字符串的方法只有：</p>

<blockquote><ol>
<li>一个一个分析，分析一段后让系统API转成字符串；</li>
<li>整个文件导入，转成字符串的工作让API来完成。</li>
</ol>
</blockquote>

<p>第一种方法非常复杂，我想也没有很多人认识所有字符编码；第二种方法遇到巨大的文件的时候非常耗内存。</p>

<p>前几天我想到了一个折中的方法，它可以一小段一小段地读入文本，利用的是文本里的特殊字符。方法如下：</p>

<p>首先要知道文本的编码（这里以SHIFT-JIS为例），除了UTF8和有BOM的文本，其余的一般很难能够直接从文本里分析出它的编码。</p>

<p>还要知道文本的特征，比如是小说的话肯定会有换行符（这里以换行符为例）。</p>

<p>获得换行符用SHIFT-JIS表示的bytes。</p>

<p>用binary的方式读入文件，遇到换行符的bytes就截断（太短的话还可以稍微改进一下），把获得的那一串字节用系统API转换成字符串。 重复这个步骤，读到不想读为止。</p>

<p>`</p>
]]></content>
  </entry>
  
</feed>
